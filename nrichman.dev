##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

upstream git {
    server localhost:28000;
}
#upstream storage {
#    server 127.0.0.1:3000;
#}
#server {
#    server_name storage.nrichman.dev;
#        if ($host = storage.nrichman.dev) {
#            return 301 https://nrichman.dev/git/$request_uri;
#        } # managed by Certbot
#    return 404;
#
#    listen 443 ssl; # managed by Certbot
#    ssl_certificate /etc/letsencrypt/live/dashboard.nrichman.dev/fullchain.pem; # managed by Certbot
#    ssl_certificate_key /etc/letsencrypt/live/dashboard.nrichman.dev/privkey.pem; # managed by Certbot
#    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
#    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
#
#}
#
#
#log_format main '$remote_addr $http_x_forwarded_for - $remote_user [$time_local] "$host" "$request" '
#            '$status $body_bytes_sent "$http_referer" '
#            '"$http_user_agent" $request_time';
# redirect https
server {
    listen 80;
    server_name cloud.nrichman.dev git.nrichman.dev nrichman.dev www.nrichman.dev;
    return 302 https://$server_name$request_uri; 
}
##############################################################################################
# git.nrichman.dev main server
#  Redirects to localhost:28000 for gitea docker container
server {
    access_log /var/log/nginx/git.nrichman.dev.access.log main;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    ssl on;
    ssl_certificate /etc/ssl/nrichman.dev/nrichman.dev.pem;
    ssl_certificate_key /etc/ssl/nrichman.dev/nrichman.dev.key;
    server_name git.nrichman.dev;

    location / {
        proxy_set_header    Host              $host;
        proxy_set_header    X-Real-IP         $remote_addr;
        proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
	      proxy_set_header    X-Forwarded-Proto $scheme;
        proxy_pass          http://127.0.0.1:28000;
	      proxy_read_timeout  90;
        proxy_redirect      off;
    } # managed by Certbot

}
##############################################################################################
# Nextcloud main server
server {
  listen 443 ssl;
  ssl_certificate /etc/ssl/nrichman.dev/nrichman.dev.pem;
  ssl_certificate_key /etc/ssl/nrichman.dev/nrichman.dev.key; 

  server_name cloud.nrichman.dev;
  location / {
      proxy_set_header    Host              $host;
      proxy_set_header    X-Real-IP         $remote_addr;
      proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Proto $scheme;
      proxy_pass          http://127.0.0.1:3005;
      proxy_read_timeout  90;
      proxy_redirect      off;
  }
}
##############################################################################################
# nrichman.dev main server
server {
    listen 443 ssl;
    ssl_certificate /etc/ssl/nrichman.dev/nrichman.dev.pem;
    ssl_certificate_key /etc/ssl/nrichman.dev/nrichman.dev.key; 

    server_name  www.nrichman.dev nrichman.dev default;
    root /var/www/html;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.nginx-debian.html;
    access_log /var/log/nginx/nrichman.dev.access.log main;

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        #
    }

    # pass PHP scripts to FastCGI server
    #
    #location ~ \.php$ {
    #    include snippets/fastcgi-php.conf;
    #
    #    # With php-fpm (or other unix sockets):
    #    fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
    #    # With php-cgi (or other tcp sockets):
    #    fastcgi_pass 127.0.0.1:9000;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny all;
    #}

}
##############################################################################################
#Force HTTPS
#
#server {
#    if ($host = git.nrichman.dev) {
#        return 301 https://$host$request_uri;
#    } 
#    server_name git.nrichman.dev;
#    listen 80;
#    return 404; 
#}
#server {
#    if ($host = storage.nrichman.dev) {
#        return 301 https://$host$request_uri;
#    } # managed by Certbot
#    server_name storage.nrichman.dev;
#    listen 80;
#    return 404; # managed by Certbot
#}
